#!/bin/sh

set -e

run(){
    echo "***************"
    echo " Release v.$1"
    echo "***************"

      # create local branch
    echo "> Creating $1 branch ..."
    git checkout -b $1
	# set branch release version
	echo "> Building v.$1 ..."
	mvn versions:set -DnewVersion="$1" > /dev/null 2>&1
	mvn clean install -Pdeb -Prelease -DskipTests > /dev/null 2>&1
	git commit -a -m "release v.$1"
   	echo "> Pushing $1 branch ..."
    git push --set-upstream origin $1

	# change to master branch
	echo "> Creating v.$2 for development ..."
	git checkout master
	# set development version
	mvn versions:set -DnewVersion="$2" > /dev/null 2>&1
	git commit -a -m "prepare to develop v.$2"
	echo "> Pushing origin/master ..."
	git push origin master
    git branch --set-upstream master origin/master

	# cleanup
	find -name "*.versionsBackup"| xargs -I file rm file
}

release_version=$(grep -oP '(?<=<version>).*(?=</version>)' pom.xml|sed -n "1p"|grep -oE "[0-9\.]+")
mayor_version=$( echo $release_version | grep -Eo "(^[0-9]*)" )
mid_version=$( echo $release_version | grep -Eo "(\.)[0-9]*(\.)" | grep -Eo "[0-9]*" )
minor_version=$( echo $release_version | grep -Eo "([0-9]*$)" )

if [ $release_version = 1.0.0 ]; then
    run "1.0.0" "1.0.1-SNAPSHOT"
    exit 0
fi

case $1 in
    mayor)
        mayor_version=$(( mayor_version + 1 ))
        mid_version=0
        minor_version=0
        ;;
    mid)
        mid_version=$(( mid_version + 1 ))
        minor_version=0
        ;;
    minor)
        ;;
    *)
        mid_version=$(( mid_version + 1 ))
        minor_version=0
esac

run "$mayor_version.$mid_version.$minor_version" "$mayor_version.$mid_version.$(( minor_version + 1 ))-SNAPSHOT"